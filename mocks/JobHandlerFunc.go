// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// JobHandlerFunc is an autogenerated mock type for the JobHandlerFunc type
type JobHandlerFunc struct {
	mock.Mock
}

type JobHandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *JobHandlerFunc) EXPECT() *JobHandlerFunc_Expecter {
	return &JobHandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *JobHandlerFunc) Execute(_a0 context.Context, _a1 string) {
	_m.Called(_a0, _a1)
}

// JobHandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type JobHandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *JobHandlerFunc_Expecter) Execute(_a0 interface{}, _a1 interface{}) *JobHandlerFunc_Execute_Call {
	return &JobHandlerFunc_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *JobHandlerFunc_Execute_Call) Run(run func(_a0 context.Context, _a1 string)) *JobHandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *JobHandlerFunc_Execute_Call) Return() *JobHandlerFunc_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *JobHandlerFunc_Execute_Call) RunAndReturn(run func(context.Context, string)) *JobHandlerFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewJobHandlerFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobHandlerFunc creates a new instance of JobHandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobHandlerFunc(t mockConstructorTestingTNewJobHandlerFunc) *JobHandlerFunc {
	mock := &JobHandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
