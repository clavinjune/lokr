// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"
)

// TxHandler is an autogenerated mock type for the TxHandler type
type TxHandler struct {
	mock.Mock
}

type TxHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *TxHandler) EXPECT() *TxHandler_Expecter {
	return &TxHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function with given fields: _a0, _a1
func (_m *TxHandler) Handle(_a0 context.Context, _a1 *sqlx.Tx) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type TxHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sqlx.Tx
func (_e *TxHandler_Expecter) Handle(_a0 interface{}, _a1 interface{}) *TxHandler_Handle_Call {
	return &TxHandler_Handle_Call{Call: _e.mock.On("Handle", _a0, _a1)}
}

func (_c *TxHandler_Handle_Call) Run(run func(_a0 context.Context, _a1 *sqlx.Tx)) *TxHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *TxHandler_Handle_Call) Return(_a0 error) *TxHandler_Handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxHandler_Handle_Call) RunAndReturn(run func(context.Context, *sqlx.Tx) error) *TxHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewTxHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewTxHandler creates a new instance of TxHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTxHandler(t mockConstructorTestingTNewTxHandler) *TxHandler {
	mock := &TxHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
